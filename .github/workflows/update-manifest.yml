name: Update manifest on PR

on:
  workflow_run:
    workflows: ["PR Game Structure Check"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write

jobs:
  update-manifest:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed game directory
        id: find
        run: |
          # Get PR number from the triggering workflow
          PR_NUMBER=$(jq -r '.workflow_run.pull_requests[0].number // empty' "$GITHUB_EVENT_PATH")
          
          if [ -z "$PR_NUMBER" ]; then
            echo "No pull request found in the triggering workflow run" >&2
            exit 1
          fi
          
          # Fetch PR data using GitHub API
          PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                     "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")
          
          BASE=$(echo "$PR_DATA" | jq -r '.base.sha')
          HEAD=$(echo "$PR_DATA" | jq -r '.head.sha')
          HEAD_REF=$(echo "$PR_DATA" | jq -r '.head.ref')
          
          # Checkout the PR's head commit to get access to its files
          git fetch origin "$HEAD" --depth=1
          git checkout "$HEAD"
          
          files=$(git diff --name-only "$BASE" "$HEAD")
          dir=$(echo "$files" | grep '^games/' | cut -d/ -f2 | sort -u)
          
          if [ -z "$dir" ]; then
            echo "No game directory found in changes" >&2
            exit 1
          fi
          
          echo "dir=$dir" >> $GITHUB_OUTPUT
          echo "Found changed game directory: $dir"

      - name: Read game.json
        id: info
        run: |
          GAME_JSON="games/${{ steps.find.outputs.dir }}/game.json"
          
          if [ ! -f "$GAME_JSON" ]; then
            echo "game.json not found at $GAME_JSON" >&2
            exit 1
          fi
          
          GAME_ID=$(jq -r .id < "$GAME_JSON")
          GAME_DESC=$(jq -r .description < "$GAME_JSON")
          
          if [ "$GAME_ID" = "null" ]; then
            echo "Missing 'id' in game.json" >&2
            exit 1
          fi
          
          if [ "$GAME_DESC" = "null" ]; then
            echo "Missing 'description' in game.json" >&2
            exit 1
          fi
          
          echo "id=$GAME_ID" >> $GITHUB_OUTPUT
          echo "description=$GAME_DESC" >> $GITHUB_OUTPUT
          echo "Game ID: $GAME_ID"
          echo "Game description: $GAME_DESC"

      - name: Update manifest.json
        run: |
          MANIFEST="games/manifest.json"
          
          if [ ! -f "$MANIFEST" ]; then
            echo "manifest.json not found at $MANIFEST" >&2
            exit 1
          fi
          
          # Use --arg to safely pass variables to jq
          GAME_ID="${{ steps.info.outputs.id }}"
          GAME_DESC="${{ steps.info.outputs.description }}"
          
          tmp=$(mktemp)
          jq --arg id "$GAME_ID" --arg desc "$GAME_DESC" '.[$id]=$desc' "$MANIFEST" > "$tmp" && mv "$tmp" "$MANIFEST"
          echo "Updated manifest.json with new game information"

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Commit & push manifest update
        run: |
          if [[ -n $(git status --porcelain games/manifest.json) ]]; then
            git add games/manifest.json
            git commit -m "chore: update manifest.json for ${{ steps.info.outputs.id }}"
            git push --no-verify
          else
            echo "No changes to manifest.json to commit"
          fi